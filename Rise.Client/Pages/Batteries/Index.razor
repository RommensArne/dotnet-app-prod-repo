@page "/batteries"
@using Rise.Shared.Batteries
@using Rise.Shared.Addresses
@using Rise.Domain.Batteries
@using Rise.Client.Components.Batteries
@inject NavigationManager Navigation
@inject IBatteryService BatteryService
@inject ISnackbar Snackbar
@inject IDialogService DialogService
@using DialogOptions = MudBlazor.DialogOptions
@using MudBlazor
@using Microsoft.AspNetCore.Authorization
@attribute [Authorize(Roles = "Administrator")]

<link href="https://use.fontawesome.com/releases/v5.14.0/css/all.css" rel="stylesheet">
<link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/4.7.0/css/font-awesome.min.css">

<div class="container mx-auto p-6" style="background-color:Color.Background; color:Color.TextPrimary;">
    <MudPaper class="p-4 shadow-none" Style="background-color:Color.Surface; color:Color.TextPrimary;">
        <div class="d-flex justify-content-between">
            <MudItem>
                <MudText Typo="Typo.h5">Batterijen</MudText>
            </MudItem>
            <MudItem>
                <MudButton Color="Color.Primary" Variant="Variant.Filled" @onclick="CreateBattery"
                    Class="mb-4">
                    <MudIcon Icon="fas fa-plus" />
                    <!-- only icon on xs screens-->
                    <MudHidden Breakpoint="Breakpoint.Xs">
                        <MudText Typo="Typo.body1" Class="ml-4">Batterij aanmaken</MudText>
                    </MudHidden>
                </MudButton>
            </MudItem>
        </div>
        @if (isLoading)
        {
            <div class="d-flex justify-content-center">
                <MudProgressCircular Color="Color.Default" Indeterminate="true" class="mt-3" />
            </div>
        }
        else if (batteries == null)
        {
            <MudText Typo="Typo.body1">Geen batterijen gevonden.</MudText>
        }
        else
        {
            <MudDataGrid Items="@batteries"  Filterable="true" class="shadow-none">
                <Columns>
                    <HierarchyColumn T="BatteryDto.BatteryDetail" />
                    <PropertyColumn Property="b => b.Name" Title="Naam" />
                    <PropertyColumn Property="b => (b.Status).TranslateStatusToNL()" Title="Status" />
                    <PropertyColumn Property="b => b.User.FullName" Title="Gebruiker" />
                    <TemplateColumn>
                        <HeaderTemplate>Telefoonnummer </HeaderTemplate>
                        <CellTemplate>
                            <a href="tel:@context.Item.User.PhoneNumber">@context.Item.User.PhoneNumber</a>
                        </CellTemplate>
                    </TemplateColumn>
                    <TemplateColumn Title="Acties">
                        <CellTemplate>
                            <MudStack Row>
                                <MudTooltip Text="Bewerken">
                                    <MudIconButton Icon=@Icons.Material.Filled.EditNote Size="Size.Medium"
                                        Color="Color.Primary" @onclick="() => EditBattery(context.Item.Id)"
                                        Class="hover:bg-primary transition duration-300 ease-in-out" />
                                </MudTooltip>
                                <MudTooltip Text="Verwijderen">
                                    <MudIconButton Icon="@Icons.Material.Filled.Delete" Color="Color.Primary"
                                        @onclick="() => ConfirmDeleteBattery(context.Item.Id)"
                                        class="hover:bg-primary transition duration-300 ease-in-out" />
                                </MudTooltip>
                            </MudStack>
                        </CellTemplate>
                    </TemplateColumn>
                </Columns>
        <ChildRowContent>
            <MudCard class="shadow-none">
                <MudCardHeader>
                    <CardHeaderContent>
                        <MudText Typo="Typo.h6">Details @context.Item.Name </MudText>
                    </CardHeaderContent>
                </MudCardHeader>
                <MudCardContent>
                    <MudText Typo="Typo.body1"><strong>Status: </strong>@((context.Item.Status).TranslateStatusToNL())</MudText>
                    <MudText Typo="Typo.body1"><strong>Gebruiker: </strong>@context.Item.User.FullName</MudText>
                    <MudText Typo="Typo.body1"><strong>Adres: </strong>
                    @(context.Item.User.Address is null?"onbekend":context.Item.User.Address!.FullAddress)</MudText>
                    <MudItem/>
                    <MudText Typo="Typo.body1"><strong>Gebruikscycli: </strong>@context.Item.UseCycles</MudText>
                    <MudText Typo="Typo.body1"><strong>Laatste gebruiksdatum: </strong>
                    @(context.Item.DateLastUsed == DateTime.MinValue?"nog niet gebruikt":context.Item.DateLastUsed.ToString("dd/MM/yyyy",  new System.Globalization.CultureInfo("nl-BE")))</MudText>
                </MudCardContent>
            </MudCard>
        </ChildRowContent>
        <PagerContent>
            <MudDataGridPager PageSizeOptions="pageSizeOptions" RowsPerPageString="Batterijen per pagina:" />
        </PagerContent>
        </MudDataGrid>
        }
    </MudPaper>
</div>

@code {

    private IEnumerable<BatteryDto.BatteryDetail>? batteries;
    private int[] pageSizeOptions = new int[] { 10,25,50 };
    private bool isLoading = true;
    protected override async Task OnInitializedAsync()
    {
        await LoadBatteries();
        isLoading = false;
    }

    private async Task LoadBatteries()
    {
        batteries = await BatteryService.GetAllBatteriesWithDetailsAsync();
    }

    private async Task EditBattery(int batteryId)
    {
        var options = new DialogOptions { MaxWidth = MaxWidth.Small, FullWidth = true, CloseButton = true };
        DialogParameters parameters = new DialogParameters<BatteryDetailDialog>
        {
            ["batteryId"] = batteryId
        };

        var result = await DialogService.Show<BatteryDetailDialog>("Batterij bewerken", parameters, options).Result;

        if (!result.Canceled)
        {
            await LoadBatteries();
        }
    }

    private async Task CreateBattery()
    {
        var options = new DialogOptions { MaxWidth = MaxWidth.Small, FullWidth = true, CloseButton = true };

        var result = await DialogService.Show<BatteryDetailDialog>("Nieuwe batterij", options).Result;

        if (!result.Canceled)
        {
            await LoadBatteries();
        }
    }

    private async Task ConfirmDeleteBattery(int batteryId)
    {
        var parameters = new DialogParameters
        { 
            {"Title","Batterij verwijderen"},
            { "Message", "Weet u zeker dat u deze batterij wilt verwijderen?" },
            { "ConfirmText", "Verwijderen" },
            { "CancelText", "Annuleren" },
            { "ShowCancelButton", true }
        };

        var dialog = DialogService.Show<ConfirmationDialog>("Bevestiging", parameters);
        var result = await dialog.Result;

        if (!result.Canceled)
        {
            await DeleteBattery(batteryId);
        }
    }

    private async Task DeleteBattery(int batteryId)
    {
        var result = await BatteryService.DeleteBatteryAsync(batteryId);
        if (result)
        {
            await LoadBatteries();
            Snackbar.Add("Boeking succesvol verwijderd.", Severity.Success);
        }
        else
        {
            Snackbar.Add("Er is iets fout gegaan bij het verwijderen van de boeking.", Severity.Error);
        }
    }
}